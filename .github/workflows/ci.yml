# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will install Deno and run tests across stable and nightly builds on Windows, Ubuntu and macOS.
# For more information see: https://github.com/denolib/setup-deno

name: Deno

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    runs-on: ubuntu-latest # runs a test on Ubuntu, Windows and macOS

    steps:
      - name: Set output
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF:10}
      # 拉取源码
      - name: Checkout
        uses: actions/checkout@master

      # 打包构建
      - name: Build
        uses: actions/setup-node@master
      - run: npm install
      - run: npm run build
      - run: tar -zcvf release.tgz .nuxt package.json package-lock.json pm2.config.json static nuxt.config.js
      # 把.nuxt、nuxt.config.js等文件，打包压缩为release.tgz

      # 第三步：发布 Release
      - name: Create Release # 创建Release，可以在仓库看到一个个版本
        id: create_release
        uses: actions/create-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }} # 之前GitHub添加的Token
        with:
          tag_name: ${{ github.ref }} # (tag)标签名称
          release_name: Release ${{ github.ref }}
          draft: false # 是否是草稿
          prerelease: false # 是否是预发布

      # 第四步：上传构建结果到 Release（把打包的tgz上传到Release）
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 上传地址，通过创建Release获取到的
          asset_path: ./release.tgz # 要上传文件
          asset_name: release.tgz # 上传后的文件名
          asset_content_type: application/x-tgz

      # 第五步：部署到服务器
      - name: Deploy
        uses: appleboy/ssh-action@master # 使用ssh链接服务器
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          # port: ${{ secrets.PORT }}
          script: | # 执行命令（运行到服务器）cd：要确保服务器有这个目录； wget：下载上一步的release到服务器； tar：解压； 安装依赖；启动服务
            cd /root/project/blog-web
            rm -rf release.tgz
            wget https://github.com/zhoujingang/blogs/releases/download/${{ steps.vars.outputs.tag }}/release.tgz
            tar zxvf release.tgz
            npm install --production
            pm2 reload pm2.config.json

            
